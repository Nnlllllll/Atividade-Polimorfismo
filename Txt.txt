public abstract class Funcionario (
private String nome;
2m
1 public String getNome() f
VOU
return nome;
8 public void setNome(String nome)
AWkESO
this.nome = nome;
// Método abstrato que será
public abstract double


implementado pelas classes filhas
calcularSalarioFinal();
//
public class Vendedor extends Funcionario (
private double salarioBase;
private double comissao;


public Vendedor(double salarioBase, double comissao) (
this.salarioBase = salarioBase;
this.comissao = comissao;


@override
public double calcularSalarioFinal() (
return salarioBase + comissao;
//
public class FreeLancer extends Funcionario (
2 private int diasTrabalhados;
3 private double valorDia;
4
5 public FreeLancer(int diasTrabalhados
6
this.diasTrabalhados =
7
this. valorDia
valorDia;
8
F
9
10
@Override
11
public double calcularsalarioFinal() f
return diasTrabalhados
* valorDia;
//
public class Empresa
public static void main(String[] args) (
Funcionario y
new Vendedor(2000, 500); // Vendedor com salario base de 2000 e comissão de 500
Funcionario f= new FreeLancer(20, 150); // Freelancer com 20 dias trabalhados a 150 cada
obterSalarioDoFuncionario(v)); / Chama Vendedor
// Chama


2
3


5
6


System.out.println("Salário do Vendedor:
+
System.out.println("Salário do Freelancer: "+ obterSalarioDoFuncionario(f)); // Chama FreeLancer


public static double obterSalarioDoFuncionario(Funcionario funcionario)
return funcionario.calcularSalarioFinal(); // Polimorfismo em açao
